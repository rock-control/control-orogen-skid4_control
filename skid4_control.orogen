name "skid4_control"
version "0.1"

using_library 'motor_controller'
import_types_from "base"

task_context "Controller" do
    abstract

    input_port("status_samples", "base/samples/Joints").
        doc("status data of the motor driver")

    output_port("command", "base/commands/Joints").
        doc("output command for the motor drivers. A data connection type is recommended")

    input_port("status", "base/actuators/Status").
        doc("motor data")

    output_port("simple_command", "base/actuators/Command").
        doc("output command for the hbridges. A data connection type is recommended")
end

# The simplest four-wheel, skid-steering controller you can get
task_context "SimpleController" do
    subclasses "Controller"

    needs_configuration

    property("timeout", "double",0.1).
        doc("Timeout in seconds after a stop command is emitted if no new motion commands are available.")

    property("wheel_radius", "double").
        doc("the radius of a wheel, in meters")
    property("track_width", "double").
        doc("the distance between the two wheels of the same axis, in meters")

    property("left_wheel_names", "std::vector<std::string>")
    property("right_wheel_names", "std::vector<std::string>")

    input_port('motion_command', 'base/commands/Motion2D').
        doc('input command in rotation and translation. Requires a data connection type.')
end

# A controller that applies constant speed to all 4 wheels
# It can't turn the robot and is only usefull for datagathering
task_context "ConstantSpeedController" do
    subclasses "Controller"

    needs_configuration

    property("speed", "double", 0.0).
        doc("speed that is applied to the motors")

    input_port('motion_command', 'base/commands/Motion2D').
        doc('input command in rotation and translation. Requires a data connection type.')
end

task_context "SoftTurnController" do
    subclasses "Controller"

    needs_configuration

    property("wheel_radius", "double").
        doc("the radius of a wheel, in meters")
    property("track_width", "double").
        doc("the distance between the two wheels of the same axis, in meters")

    property("turnSpeed", "double", 0.8)
    property("translationalSpeed", "double", 0.1)
    property("turnVariance", "double", 0.1)

    property("P", "double", 0.0)
    property("I", "double", 0.0)
    property("D", "double", 0.0)
    property("MinMax", "double", 0.0)
    property("N", "double", 0.0)
    property("B", "double", 1.0)
    property("Tt", "double", -1.0)


    input_port('motion_command', 'base/commands/Motion2D').
        doc('input command in rotation and translation. Requires a data connection type.')
end


